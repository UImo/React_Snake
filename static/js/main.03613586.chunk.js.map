{"version":3,"sources":["index.js"],"names":["Board","props","WIDTH","HEIGHT","itemWidth","itemHeight","restart","setState","state","paused","pausePlay","hightScore","snake","length","grid","initGrid","food","getRandom","gameOver","direction","head","getCenterOfGrid","body","tickTime","width","height","handleKeyPress","bind","document","addEventListener","this","removeEventListener","clearInterval","window","fnInterval","matrix","row","col","push","status","isFood","isHead","isBody","Math","floor","random","setInterval","gameTick","setTick","isIn","i","oldHead","unshift","pop","tail","isGameOver","key","oldDirection","keyCode","preventDefault","moveSnake","foodHandler","growSnake","checkGameOver","checkIfFood","checkIfHead","checkIfBody","className","style","toString","gridItems","map","gridItem","renderSquare","onClick","src","alt","React","Component","Game","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.03613586.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n// Class Snake\n// - Snake movements\n// - controlls\n\n// Board\n// - borders\n// - contains the grid\n// - will host the snake and the apple\n\nclass Board extends React.Component {\n    WIDTH = 11;\n    HEIGHT = 11;\n    itemWidth = 100/this.WIDTH;\n    itemHeight = 100/this.HEIGHT;\n    constructor(props){\n        super(props);\n        this.state = {\n            tickTime: 200,\n            paused : true,\n            width: this.WIDTH,\n            height: this.HEIGHT,\n            hightScore: 0,\n            gameOver: false,\n            grid: this.initGrid(this.HEIGHT, this.WIDTH),\n            food: this.getRandom(this.HEIGHT, this.WIDTH),\n            direction:'up',\n            snake: {\n                head: this.getCenterOfGrid(),\n                body: [],\n                length: 0\n            }\n        };\n\n        //this.initGrid();\n        this.handleKeyPress = this.handleKeyPress.bind(this)\n    }\n\n    componentDidMount(){\n        document.body.addEventListener('keydown', this.handleKeyPress);\n        \n    }\n\n    componentWillUnmount(){\n        document.body.removeEventListener('keydown', this.handleKeyPress);\n        clearInterval(window.fnInterval);\n    }\n\n\n    initGrid(height,width){\n\n        const matrix = [];\n        for(let row=0; row < height; row++){\n            for(let col=0; col < width; col++){\n                matrix.push({\n                    row,\n                    col,\n                    status:0,        // 0:empty 1:wall 2:food 3:snake 4:head\n                    isFood: false,\n                    isHead: false,\n                    isBody: false,\n                    //isBody: false\n                })\n            }\n        };\n        // const matrix = new Array(this.state.height).fill(0).map(() => new Array(this.state.width).fill(0));\n        //this.setState({grid: matrix,})\n        return matrix;\n    }\n\n    restart = () => {\n        this.setState((state)=>{\n            //if(state.snake.length > state.hightScore) state.hightScore = state.snake.length;\n            if(!state.paused) this.pausePlay();\n            return {\n                ...state,\n                hightScore: state.snake.length > state.hightScore ? state.snake.length : state.hightScore,\n                grid: this.initGrid(this.HEIGHT, this.WIDTH),\n                food: this.getRandom(this.HEIGHT, this.WIDTH),\n                gameOver: false,\n                direction:'up',\n                snake: {\n                    head: this.getCenterOfGrid(),\n                    body: [],\n                    length: 0\n                }\n            }\n        })\n    }\n\n    // Behaviors\n\n    getRandom(){\n        return {\n            row: Math.floor(Math.random() * this.HEIGHT),\n            col: Math.floor(Math.random() * this.WIDTH)\n        }\n    }\n\n    getCenterOfGrid() {\n        return {\n            row: Math.floor((this.HEIGHT) / 2),\n            col: Math.floor((this.WIDTH) / 2),\n        }\n    }\n\n    setTick(){\n        window.fnInterval = setInterval(() => {\n            this.gameTick();\n        }, this.state.tickTime);\n    }\n\n    /*setPlay(){\n        this.setState({ paused : false });\n        this.setTick();\n    }\n\n    setPause() {\n        this.setState({ paused : true });\n        clearInterval(window.fnInterval);\n    }*/\n\n    pausePlay(){\n        if(this.state.paused){\n            this.setState({ paused : false });\n            this.setTick();\n        }\n        else{\n            this.setState({ paused : true });\n            clearInterval(window.fnInterval);\n        }\n    }\n\n    // --- FOOD ---\n    foodHandler(){\n        // add del food if more than one food\n        function isIn(body, food){\n            for(let i=0; i<body.length; i++){\n                if(body[i].row === food.row && body[i].col === food.col) return true;\n            }\n            return false;\n        }\n\n        let food = this.getRandom();\n        const {body} = this.state.snake;\n        while(isIn(body,food)) {\n            food = this.getRandom();\n        }\n        return food;\n    }\n\n    // for rendering function\n    checkIfFood(grid){\n        const isFood = (this.state.food.row === grid.row && this.state.food.col === grid.col);\n        grid.isFood = isFood;\n        // return isFood;\n    }\n\n    // --- ---\n\n    // --- SNAKE ---\n    // - Head -\n    \n    checkIfHead(grid){\n        const isHead = (this.state.snake.head.row === grid.row && this.state.snake.head.col === grid.col);\n        grid.isHead = isHead;\n        // return isFood;\n    }\n\n    checkIfBody(grid){\n        let isBody = false;\n        for(let i=0; i<this.state.snake.body.length; i++){\n            isBody = (this.state.snake.body[i].row === grid.row && this.state.snake.body[i].col === grid.col);\n            if(isBody) break;\n        }\n        //const isBody = (this.state.snake.head.row === grid.row && this.state.snake.head.col === grid.col);\n        grid.isBody = isBody;\n        // return isFood;\n    }\n\n    // NOT USED\n    moveSnake(direction, snake){\n        let {head, body} = snake;\n        const {\n            row,\n            col\n        } = head;\n\n        let oldHead = {\n            row,\n            col\n        };\n        //const oldHead = snake.head;\n        \n        switch (direction) {\n            case 'left':\n                head.col--;\n                break;\n            case 'up':\n                head.row--;\n                break;\n            case 'down':\n                head.row++;\n                break;\n            case 'right':\n                default:\n                    head.col++;\n                    break;\n        };\n        body.unshift(oldHead);\n        body.pop(snake.body[snake.body.length-1])\n        return {...snake,\n            head,\n            body\n        };\n    }\n\n    growSnake(snake){\n        snake.length += 1;\n        const tail = snake.body.length === 0 ? snake.head : snake.body[snake.body.length-1];\n        snake.body.push(tail);\n        return snake;\n    }\n\n    checkGameOver(snake){\n        // snake head\n        // maybe score (length) if the snake can't get any bigger\n        // snake body\n        // limits\n        // later walls if they're added\n        let isGameOver = false\n        const {head, body} = snake;\n        const {row,col} = head;\n        if(row < 0 || row >= this.HEIGHT || col < 0 || col >= this.WIDTH) isGameOver = true;\n        // else if(body.includes(head)) isGameOver = true;\n        for(let i=0; i<body.length; i++){\n            if(body[i].row === row && body[i].col === col) isGameOver = true;\n        }\n        return isGameOver;\n    }\n\n    handleKeyPress(key){\n        this.setState((state) => {\n            let {direction, oldDirection} = this.state;\n            switch (key.keyCode) {\n                case 37:\n                    if(oldDirection !== 'right') direction = 'left';\n                    break;\n                case 38:\n                    default:\n                        if(oldDirection !== 'down') direction = 'up';\n                        break;\n                case 39:\n                    if(oldDirection !== 'left') direction = 'right';\n                    break;\n                case 40:\n                    if(oldDirection !== 'up') direction = 'down';\n                    break;\n                case 32:\n                    //state.paused ? this.setPlay(): this.setPause();\n                    key.preventDefault()\n                    if(!this.state.gameOver) this.pausePlay()\n                    break\n            }\n            return {\n                ...state,\n                direction\n            };\n        });\n        \n    }\n\n    // ---\n    gameTick() {\n        this.setState((state) => {\n            let {\n                direction,\n                gameOver,\n                snake,\n                food\n            } = state;\n\n            // if(gameOver) this.pausePlay();\n            \n            if(!gameOver){\n                \n                \n                /*let {\n                    tail\n                } = snake;*/\n                \n                // Move snake's head\n                snake = this.moveSnake(direction, snake);\n                this.setState({oldDirection: direction});\n\n                // if head on food\n                if(snake.head.row === food.row && snake.head.col === food.col) {\n                    food = this.foodHandler();\n                    snake = this.growSnake(snake)\n                }\n                else gameOver = this.checkGameOver(snake);\n                \n            }\n\n            return {\n                ...state,\n                gameOver,\n                food,\n                snake: snake\n            }\n\n            /*const newState = {\n                ...state,\n                food,\n                snake: {\n                  head\n                }\n            };*/\n        })\n    }\n\n\n    renderSquare(grid){\n        this.checkIfFood(grid); // function can be replaced || Two options either bool or set\n        this.checkIfHead(grid);\n        this.checkIfBody(grid);\n        \n        let className = 'grid-item';\n        if (grid.isFood){className += ' is-food'}\n        if (grid.isHead){className += ' is-head'}\n        if (grid.isBody){className += ' is-body'}\n        if (this.state.gameOver){className += ' is-gameOver'}\n        //if (grid.isFood && grid.isHead){this.foodHandler()} // Checked in gametick\n        return (\n        <div className = {className}\n            key = { grid.row.toString()+'-'+grid.col.toString() } \n            style = {{width : this.itemWidth.toString()+'%',\n                    height : this.itemHeight.toString()+'%'}} >\n            {}\n        </div>);\n    }\n\n    render(){\n        //const food = this.getRandomGrid();\n        const gridItems = this.state.grid.map((gridItem) => this.renderSquare(gridItem));\n        \n        return(\n        <div>\n        <div className=\"snake-container\">\n            <div className=\"grid\">\n                {gridItems}\n            </div>\n            <div className= \"game-info\">\n                <h2 className=\"score\">Score: {this.state.snake.length.toString()}</h2>\n                <h4>Highscore: {this.state.hightScore.toString()}</h4>\n                <div className=\"pause\">{this.state.paused ? \"Paused - Space to play\": this.state.gameOver ? \"Game Over\" : \"Space to pause\"}</div>\n                <button className=\"restart\" onClick={this.restart}><img className=\"icon\" src=\"https://cdn4.iconfinder.com/data/icons/glyphs/24/icons_update-512.png\" alt=\"re-start\"/></button>\n                \n            </div>\n        </div>\n        </div>);\n    }\n}\n\n\nclass Game extends React.Component {\n    render() {\n        return (\n            <div className = 'game'>\n                <header>\n                    <h1 className=\"title\">Snake</h1>\n                </header>\n                <div className=\"game-board\">\n                    <Board />\n                </div>\n                <footer><span className=\"name\">by Mathis Powell</span></footer>\n            </div>\n        )\n    }\n}\n\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}